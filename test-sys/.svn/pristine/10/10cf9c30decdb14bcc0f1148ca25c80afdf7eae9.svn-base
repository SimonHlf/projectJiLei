package cn.windy.module.examination.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import cn.windy.module.examination.service.IFrontUserService;

import org.hibernate.boot.model.IdGeneratorStrategyInterpreter.GeneratorNameDeterminationContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.EnableLoadTimeWeaving;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.alibaba.fastjson.JSON;

import cn.windy.module.admin.hibernate.model.User;
import cn.windy.module.core.controller.BaseController;
import cn.windy.module.examination.mybatis.model.FrontUser;
import cn.windy.module.examination.mybatis.model.PaperRecord;
import cn.windy.module.examination.mybatis.model.Questions;
import cn.windy.module.examination.mybatis.model.WindyOrg;
import cn.windy.module.examination.service.PaperRecordService;
import cn.windy.module.examination.service.QuesTypeService;
import cn.windy.module.examination.service.impl.WindyOrgService;
import cn.windy.module.util.WindyConstants;
import cn.windy.util.MenuTree;
import cn.windy.util.Pagination;

@Controller
@RequestMapping("/admin/paperRecordController")
public class PaperRecordController extends BaseController {

	@Autowired
	private PaperRecordService paperRecordService; 
	
	@Autowired
	private QuesTypeService quesTypeService;

	@Autowired
	private IFrontUserService frontUserService;

	@Autowired
	private WindyOrgService windyOrgService;
	
	@RequestMapping("/getList")
	public String getList(Pagination page,String name,ModelMap map){
		User user=(User) getSession(WindyConstants.SESSION_USER);
		//判断后台登录的是否有权限查看所有机构的考试数据
		boolean s=quesTypeService.getRole(user.getId());
		List<Map<String,Object>>userRecodList=null;
		Long counts=null;
		if(s) {
			List<WindyOrg> windyOrgList=paperRecordService.getWindyOrg();
			String ss=JSON.toJSONString(windyOrgList);
			map.put("nodes", ss.replaceAll("icon", "_icon_"));
			
			userRecodList=frontUserService.userRecod(null,null, page);
			counts=frontUserService.getOneCount(null, null);
			page.setTotal(counts);
			
		}
		if(!s) {
			List<WindyOrg> windyOrgList=paperRecordService.getWindyOrgs(user.getUpdateUser());
			String ss=JSON.toJSONString(windyOrgList);
			map.put("nodes", ss.replaceAll("icon", "_icon_"));
			
			userRecodList=frontUserService.userRecod(user.getUpdateUser(),null, page);
			counts=frontUserService.getOneCount(user.getUpdateUser(), null);
			page.setTotal(counts);
		}
		map.put("list", userRecodList);
		map.put("page",page);
		return "admin/examination/PaperRecord/list";
	}
	
	//首次跳传分页
	@RequestMapping("/getOne")
	public String getOne(Pagination page,ModelMap map){
		List<Map<String,Object>>userRecodList=frontUserService.userRecod(null,null, page);
		Long counts=frontUserService.getOneCount(null, null);
		page.setTotal(counts);
		
		map.put("userRecodList", userRecodList);
		map.put("page", page);
		return "admin/examination/PaperRecord/oneDetailList";
	}
	
	
	//TODO
	//查找考生树形
	@RequestMapping("/getUser")
	public String getUser(Long insId,ModelMap map,Pagination page){
		Long pid=windyOrgService.getFormId(insId).getPid();
		List<MenuTree> mtList=new ArrayList<>();
		List<FrontUser>frontUserList=new ArrayList<>();
		List<Map<String,Object>>userRecodList=null;
		Long counts=null;
		//如果是机务段查找
		if(pid==0){
			 frontUserList=paperRecordService.getUser(insId);
			
			 userRecodList=frontUserService.userRecod(null,null, page);
			counts=frontUserService.getOneCount(null, null);
			page.setTotal(counts);
			 
			
		}
		//如果是车间查找
		if(pid!=0){
			 frontUserList=paperRecordService.getUserTwo(insId);
			
			 userRecodList=frontUserService.userRecod(insId,null, page);
			counts=frontUserService.getOneCount(insId, null);
			page.setTotal(counts);
		}
		
		for(FrontUser frontUser:frontUserList){
			MenuTree mTree=new MenuTree();
			mTree.setId(frontUser.getUserId());
			mTree.setPid((long)0);
			mTree.setName(frontUser.getNickName());
			mtList.add(mTree);
		}
		map.put("list", userRecodList);
		map.put("page", page);
		String ss=JSON.toJSONString(mtList);
		map.put("nodes2", ss.replaceAll("icon", "_icon_"));
		return "admin/examination/PaperRecord/ztreeTwo";
	}
	
	//机构分页2
	@RequestMapping("/getTwo")
	public String getTwo(Long insId,Pagination page,ModelMap map){
		Long pid=windyOrgService.getFormId(insId).getPid();
		List<Map<String,Object>>userRecodList=new ArrayList<>();
		Long counts=(long)0;
		if(pid==0) {
			userRecodList=frontUserService.userRecod(null,null, page);
			counts=frontUserService.getOneCount(null, null);
			page.setTotal(counts);
		}
		if(pid!=0){
			userRecodList=frontUserService.userRecod(insId,null, page);
			counts=frontUserService.getOneCount(insId, null);
			page.setTotal(counts);
		}
		
		
		map.put("list", userRecodList);
		map.put("page", page);
		map.put("insId", insId);
		return "admin/examination/PaperRecord/twoDetailList";
	}
	
	
	@RequestMapping("/getDetail")
	public String getDetail(Long userId,Pagination page,ModelMap map){
		List<Map<String,Object>> list = frontUserService.ExamineeRecord(page,userId);
		Pagination pagination = new Pagination();
		pagination.setPageSize(0);
		page.setTotal((Long) frontUserService.ExamineeRecord(pagination,userId).get(0).get("TOTAL"));

		map.put("list",list);
//		List<Map<String, Object>> userRecordList=paperRecordService.userRecordList(userId, null, page);
//		page.setTotal(paperRecordService.getCount(userId, null));
		
		map.put("page", page);
//		map.put("userRecordList", userRecordList);
		map.put("userId", userId);
		return "admin/examination/PaperRecord/paperRecordDetailList";
		
	}
	
	@RequestMapping("/seeDetail")
	public String seeDetail(Long recordId,ModelMap mm){
		Map map=paperRecordService.toDetail(recordId);
		//一共答对的题数
		Integer rightNum=(Integer) map.get("rightNum");
		mm.put("rightNum", rightNum);
				
		//用户总得分
		Double zongDeFen=(Double) map.get("zongDeFen");
		mm.put("zongDeFen", zongDeFen);
				
		//单选题答对的数量
		Integer danxuanRighrNum=(Integer) map.get("danxuanRighrNum");
		mm.put("danxuanRighrNum", danxuanRighrNum);
				
				//单选题答对的题号list
				List<Integer> danxuanRighrList=(List<Integer>) map.get("danxuanRighrList");
				mm.put("danxuanRighrList", danxuanRighrList);
				
				//单选题答错的数量
				Integer danxuanWrongNum=(Integer) map.get("danxuanWrongNum");
				mm.put("danxuanWrongNum", danxuanWrongNum);
				
				//单选题答错的题号list
				List<Integer> danxuanWrongList=(List<Integer>) map.get("danxuanWrongList");
				mm.put("danxuanWrongList", danxuanWrongList);
				
				//多选题答对的数量
				Integer duoxuanRightNum=(Integer) map.get("duoxuanRightNum");
				mm.put("duoxuanRightNum", duoxuanRightNum);
				
				//多选题答对题号list
				List<Integer> duoxuanRightList=(List<Integer>) map.get("duoxuanRightList");
				mm.put("duoxuanRightList", duoxuanRightList);
				
				//多选题答错的数量
				Integer duoxuanWrongNum=(Integer) map.get("duoxuanWrongNum");
				mm.put("duoxuanWrongNum", duoxuanWrongNum);
				
				//多选题答错题号list
				List<Integer> duoxuanWrongList=(List<Integer>) map.get("duoxuanWrongList");
				mm.put("duoxuanWrongList", duoxuanWrongList);
				
				//判断题答对的数量
				Integer panduanRightNum=(Integer) map.get("panduanRightNum");
				mm.put("panduanRightNum", panduanRightNum);
				
				//判断题答对题号的list
				List<Integer>panduanRightList=(List<Integer>) map.get("panduanRightList");
				mm.put("panduanRightList", panduanRightList);
				
				//判断题答错的数量
				Integer panduanWrongNum=(Integer) map.get("panduanWrongNum");
				mm.put("panduanWrongNum", panduanWrongNum);
				
				//判断题答错的题号list
				List<Integer>panduanWrongList=(List<Integer>) map.get("panduanWrongList");
				mm.put("panduanWrongList", panduanWrongList);
				
				//获取单选题列表
				List<Questions> danxuantiList=(List<Questions>) map.get("danxuantiList");
				mm.put("danxuanToLists", danxuantiList);
				//获取单选题总分值
				Integer countFen=(Integer) map.get("countFen");
				mm.put("countFen", countFen);
				
				//获取多选题列表
				List<Questions> duoxuantiList=(List<Questions>) map.get("duoxuantiList");
				mm.put("duoxianToLists", duoxuantiList);
				//获取多选题总分值
				Integer duoCountFen=(Integer) map.get("duoCountFen");
				mm.put("duoCountFen", duoCountFen);
				
				//获取判断题列表
				List<Questions> panduantiList=(List<Questions>) map.get("panduantiList");
				mm.put("panduanToLists", panduantiList);
				//获取判断题总分值
				Integer panCountFen=(Integer) map.get("panCountFen");
				mm.put("panCountFen", panCountFen);
				FrontUser frontUser = (FrontUser) getSession(WindyConstants.SESSION_FRONTUSER);
				mm.put("frontUser",frontUser);
		return "admin/examination/PaperRecord/endExamDetail";
	}
	
	//导出考生考试结果
	@RequestMapping("/outWord")
	public void outWord(Long userRecordId,HttpServletRequest req,HttpSession session,HttpServletResponse response){
		PaperRecord paperRecord =paperRecordService.getById(userRecordId);
		//获取试卷id
		Long paperCreatId=paperRecord.getAttr9();
		
		
		
		
		
		
		
		
		
	}
	
}
