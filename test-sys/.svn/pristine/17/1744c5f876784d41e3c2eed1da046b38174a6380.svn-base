package cn.windy.module.examination.dao;

import cn.windy.module.examination.mybatis.model.Examination;
import cn.windy.module.examination.mybatis.model.ExaminationQuery;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.*;

public interface ExaminationMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table examination
     *
     * @mbggenerated
     */
    int countByExample(ExaminationQuery example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table examination
     *
     * @mbggenerated
     */
    int deleteByExample(ExaminationQuery example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table examination
     *
     * @mbggenerated
     */
    @Delete({
        "delete from examination",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table examination
     *
     * @mbggenerated
     */
    @Insert({
        "insert into examination (id, exam_name, ",
        "creat_id, org_id, start_time, ",
        "end_time, sh_people, ",
        "ac_people, create_time, ",
        "founder, exam_status, ",
        "attr0, attr1, attr2, ",
        "attr3, attr4, attr5, ",
        "attr6, attr7, attr8, ",
        "attr9)",
        "values (#{id,jdbcType=BIGINT}, #{examName,jdbcType=VARCHAR}, ",
        "#{creatId,jdbcType=BIGINT}, #{orgId,jdbcType=BIGINT}, #{startTime,jdbcType=VARCHAR}, ",
        "#{endTime,jdbcType=VARCHAR}, #{shPeople,jdbcType=INTEGER}, ",
        "#{acPeople,jdbcType=INTEGER}, #{createTime,jdbcType=VARCHAR}, ",
        "#{founder,jdbcType=BIGINT}, #{examStatus,jdbcType=INTEGER}, ",
        "#{attr0,jdbcType=VARCHAR}, #{attr1,jdbcType=VARCHAR}, #{attr2,jdbcType=VARCHAR}, ",
        "#{attr3,jdbcType=VARCHAR}, #{attr4,jdbcType=VARCHAR}, #{attr5,jdbcType=VARCHAR}, ",
        "#{attr6,jdbcType=INTEGER}, #{attr7,jdbcType=INTEGER}, #{attr8,jdbcType=BIGINT}, ",
        "#{attr9,jdbcType=BIGINT})"
    })
    @Options(useGeneratedKeys = true,keyProperty = "id")
    int insert(Examination record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table examination
     *
     * @mbggenerated
     */
    int insertSelective(Examination record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table examination
     *
     * @mbggenerated
     */
    List<Examination> selectByExample(ExaminationQuery example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table examination
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "id, exam_name, creat_id, org_id, start_time, end_time, sh_people, ac_people, ",
        "create_time, founder, exam_status, attr0, attr1, attr2, attr3, attr4, attr5, ",
        "attr6, attr7, attr8, attr9",
        "from examination",
        "where id = #{id,jdbcType=BIGINT}"
    })
    @ResultMap("BaseResultMap")
    Examination selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table examination
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") Examination record, @Param("example") ExaminationQuery example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table examination
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") Examination record, @Param("example") ExaminationQuery example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table examination
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(Examination record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table examination
     *
     * @mbggenerated
     */
    @Update({
        "update examination",
        "set exam_name = #{examName,jdbcType=VARCHAR},",
          "creat_id = #{creatId,jdbcType=BIGINT},",
          "org_id = #{orgId,jdbcType=BIGINT},",
          "start_time = #{startTime,jdbcType=VARCHAR},",
          "end_time = #{endTime,jdbcType=VARCHAR},",
          "sh_people = #{shPeople,jdbcType=INTEGER},",
          "ac_people = #{acPeople,jdbcType=INTEGER},",
          "create_time = #{createTime,jdbcType=VARCHAR},",
          "founder = #{founder,jdbcType=BIGINT},",
          "exam_status = #{examStatus,jdbcType=INTEGER},",
          "attr0 = #{attr0,jdbcType=VARCHAR},",
          "attr1 = #{attr1,jdbcType=VARCHAR},",
          "attr2 = #{attr2,jdbcType=VARCHAR},",
          "attr3 = #{attr3,jdbcType=VARCHAR},",
          "attr4 = #{attr4,jdbcType=VARCHAR},",
          "attr5 = #{attr5,jdbcType=VARCHAR},",
          "attr6 = #{attr6,jdbcType=INTEGER},",
          "attr7 = #{attr7,jdbcType=INTEGER},",
          "attr8 = #{attr8,jdbcType=BIGINT},",
          "attr9 = #{attr9,jdbcType=BIGINT}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(Examination record);


    /**
     * 考试列表
     * @return
     */
    List<Map<String,Object>> findAll(@Param("start")Integer start, @Param("end") Integer end , @Param("orgId")Long orgId, @Param("examName")String examName);


    //添加考试跳转选择考生页面
    List<Map<String,Object>> findJumpAddFrontUser();

    //前端即将开始的考试
    List<Map<String,Object>> findWebExamination(@Param("start") Integer start,@Param("end")Integer end,@Param("orgId")Long orgId);


    /**
     *
     * 考试管理 添加加载考生列表
     * @param orgId
     * @param
     * @return
     */
    List<Map<String,Object>> addfrontUserTable(@Param("orgId")Long orgId);


    List<Map<String,Object>> updatefrontUserTable(@Param("orgId")Long orgId,@Param("examId")Long examId);


    /**
     * 考试详情
     * @param examId
     * @return
     */
    List<Map<String,Object>> Examdetails(@Param("examId")Long examId);

    List<Map<String,Object>> checkExamSecond(@Param("examId")Long examId,@Param("userId")Long userId);


}